---
alwaysApply: true
---

# ðŸ”¹ Branching Rules
- Always create a new branch per task/feature/bugfix.
- Never commit directly to `main` or `master`.
- Branch names should be descriptive (e.g., `feat/auth-frontend`, `fix/navbar-responsive`).

# ðŸ”¹ Commit Rules
- Enforce **Conventional Commits** style:
  - Format: `<type>(<scope>): <description>`
  - Types: feat, fix, docs, style, refactor, perf, test, chore, build, ci
  - Scope: optional, but include when useful (e.g., `feat(citizen-booking): ...`).
- Use `BREAKING CHANGE:` footer **or** `!` in type/scope if breaking changes are introduced.
- Keep commits focused; avoid unrelated edits.

# ðŸ”¹ Pull Request Rules
- Always open a PR when merging into `main`.
- Use this PR template structure:
  1. **Problem** â€“ Whatâ€™s the issue/task?
  2. **Approach** â€“ How was it solved?
  3. **Risks** â€“ Any side effects/limitations?
  4. **Tests** â€“ How was it verified?
  5. **Migrations** â€“ Any DB or infra changes?
  6. **Environment Changes** â€“ Any env vars/config updates?
- Summarize edits and rationale in the PR description.
- Avoid cross-app refactors unless thereâ€™s an approved plan.

# ðŸ”¹ Misc
- Write clear commit messages (Cursor should auto-suggest).
- Small, atomic commits preferred over one giant commit.
